import cdk = require('@aws-cdk/core');
{{#services}}
import {{abbr}} = require('@aws-cdk/aws-{{value}}');
{{/services}}

interface {{stack_prefix}}FargateStackProps {
    vpc: ec2.IVpc,
    cluster: ecs.ICluster,
}

export class {{stack_prefix}}FargateStack extends cdk.Stack {
    public readonly service: ecs.FargateService;
    public readonly repoName: string;
    public readonly dbUrl: string;
    public readonly db: rds.DatabaseCluster;

    constructor(scope: cdk.App, id: string, props: {{stack_prefix}}FargateStackProps) {
        super(scope, id);

        // import resources
        const cluster = props.cluster;
        {{#db_cluster}}
        const vpc = props.vpc;

        // Create secret from SecretsManager
        const username = '{{username}}';
        const secret = new secretsmanager.Secret(this, 'Secret', {
            generateSecretString: {
                excludePunctuation: true
            }
        });
        const password = secret.secretValue;

        {{#parameter_group}}
        {{#cfn}}
        // Create DB Cluster ParameterGroup
        const clusterParameterGroup = new rds.ParameterGroup(this, 'DBClusterPG', {
            description: '{{description}}',
            family: '{{family}}',
            parameters: {
              {{#parameters}}
                {{{.}}}
              {{/parameters}}
            }
        });
        {{/cfn}}
        {{#name}}
        // Import DB cluster ParameterGroup
        const clusterParameterGroup = rds.ParameterGroup.fromParameterGroupName(
            this, 'DBClusterPG', '{{.}}');
        {{/name}}
        {{/parameter_group}}
        // Create DB Cluster
        const db = new rds.DatabaseCluster(this, 'DBCluster', {
            engine: rds.DatabaseClusterEngine.{{engine}},
            {{#engine_version}}
            engineVersion: '{{.}}',
            {{/engine_version}}
            masterUser: {
                username: username,
                password: password
            },
            instanceProps: {
                instanceType: new ec2.InstanceType('{{instance_type}}'),
                vpc: vpc,
                vpcSubnets: {
                  subnetType: ec2.SubnetType.{{instance_subnet}}
                }
            },
            {{#kms_key}}
            kmsKey: kms.Key.fromKeyArn(this, 'DBKMSKey', '{{.}}'),
            {{/kms_key}}
            {{#backup}}
            backup: {
                {{#retention_days}}
                retentionDays: {{.}},
                {{/retention_days}}
                {{#preferred_window}}
                preferred_window: '{{.}}',
                {{/preferred_window}}
            },
            {{/backup}}
            defaultDatabaseName: '{{db_name}}',
            {{#cluster_identifier}}
            clusterIdentifier: '{{.}}',
            {{/cluster_identifier}}
            {{#removal_policy}}
            removalPolicy: cdk.RemovalPolicy.{{.}},
            {{/removal_policy}}
            {{#instance_identifier}}
            instanceIdentifierBase: '{{.}}',
            {{/instance_identifier}}
            instances: {{instances}},
            parameterGroup: clusterParameterGroup
        });
        const dbUrl = {{#postgres}}"postgres://"{{/postgres}}{{^postgres}}"mysql2://"{{/postgres}} + username + ":" + password + "@" + db.clusterEndpoint.socketAddress + "/{{db_name}}";
        this.dbUrl = dbUrl;
        {{/db_cluster}}

        const asset = new ecr_assets.DockerImageAsset(this, 'ImageAssetBuild', {
            directory: '{{source_path}}'
        });

        // compute repo name from asset image
        const parts = asset.imageUri.split("@")[0].split("/");
        const repoName = parts.slice(1, parts.length).join("/").split(":")[0];
        this.repoName = repoName;

        const image = ecs.ContainerImage.fromDockerImageAsset(asset);

        {{#fargate}}
        // Fargate service
        const lbFargate = new ecs_patterns.ApplicationLoadBalancedFargateService(this, 'LBFargate', {
            {{#service_name}}
            serviceName: '{{.}}',
            {{/service_name}}
            cluster: cluster,
            taskImageOptions: {
              image: image,
              containerName: '{{container_name}}',
              containerPort: {{container_port}},
              environment: {
                  {{#has_db}}
                  'DATABASE_URL': dbUrl,
                  {{/has_db}}
                  {{#envs}}
                  {{{.}}}
                  {{/envs}}
              },
              enableLogging: true,
            },
            {{#certificate}}
            certificate: certificatemanager.Certificate.fromCertificateArn(this, 'Certificate', '{{.}}'),
            {{/certificate}}
            {{#memory}}memoryLimitMiB: {{.}},{{/memory}}
            {{#cpu}}cpu: {{.}},{{/cpu}}
            desiredCount: {{desired_count}},
            {{#domain_name}}
            domainName: '{{.}}',
            {{/domain_name}}
            {{#domain_zone}}
            domainZone: '{{.}}',
            {{/domain_zone}}
            {{#public}}
            publicLoadBalancer: true,
            assignPublicIp: true
            {{/public}}
        });
        {{#has_db}}
        db.connections.allowDefaultPortFrom(lbFargate.service, 'From Fargate');
        this.db = db;
        {{/has_db}}
        {{/fargate}}
        {{#scaling}}

        const scaling = lbFargate.service.autoScaleTaskCount({
            maxCapacity: {{max_capacity}},
            {{#min_capacity}}
            minCapacity: {{.}}
            {{/min_capacity}}
        });
        {{#on_cpu}}
        scaling.scaleOnCpuUtilization('FargateScalingOnCpu', {
            targetUtilizationPercent: {{target_util_percent}},
            {{#disable_scale_in}}
            disableScaleIn: true,
            {{/disable_scale_in}}
            {{#scale_in_cooldown}}
            scaleInCooldownSec: {{.}},
            {{/scale_in_cooldown}}
            {{#scale_out_cooldown}}
            scaleOutCooldownSec: {{.}},
            {{/scale_out_cooldown}}
        });
        {{/on_cpu}}
        {{#on_memory}}
        scaling.scaleOnMemoryUtilization('FargateScalingOnMemory', {
            targetUtilizationPercent: {{target_util_percent}},
            {{#disable_scale_in}}
            disableScaleIn: true,
            {{/disable_scale_in}}
            {{#scale_in_cooldown}}
            scaleInCooldownSec: {{.}},
            {{/scale_in_cooldown}}
            {{#scale_out_cooldown}}
            scaleOutCooldownSec: {{.}},
            {{/scale_out_cooldown}}
        });
        {{/on_memory}}
        {{#on_metric}}
        {{#metric}}
        const metric = new cloudwatch.Metric('Metric', {
            metricName: {{name}},
            metricNamespace: {{namespace}},
            {{#color}}
            color: '{{.}}',
            {{/color}}
            dimensions: {
            {{#dimensions}}
              {{{.}}}
            {{/dimensions}}
            }
            {{#label}}
            label: '{{.}}',
            {{/label}}
            {{#period_sec}}
            periodSec: {{.}},
            {{/period_sec}}
            {{#statistic}}
            statistic: {{.}},
            {{/statistic}}
            {{#unit}}
            unit: cloudwatch.Unit.{{.}},
            {{/unit}}
        });
        {{/metric}}
        scaling.scaleOnMetric('FargateScalingOnMetric', {
            metric: metric,
            {{#scaling_steps?}}
            scalingSteps: [
            {{#scaling_steps}}
                {
                    {{#change}}change: {{.}},{{/change}}
                    {{#lower}}lower: {{.}},{{/lower}}
                    {{#upper}}upper: {{.}}{{/upper}}
                },
            {{/scaling_steps}}
            ],
            {{/scaling_steps?}}
            {{#adjustment_type}}
            adjustmentType: applicationautoscaling.{{.}},
            {{/adjustment_type}}
            {{#cooldown_sec}}
            cooldownSec: {{.}},
            {{/cooldown_sec}}
            {{#min_adjustment_magnitude}}
            minAdjustmentMagnitude: {{.}},
            {{/min_adjustment_magnitude}}
        });
        {{/on_metric}}
        {{#on_request}}
        scaling.scaleOnRequestCount('FargateScalingOnRequest', {
            requestsPerTarget: {{requests_per_target}},
            targetGroup: target,
            {{#disable_scale_in}}
            disableScaleIn: true,
            {{/disable_scale_in}}
            {{#scale_in_cooldown}}
            scaleInCooldownSec: {{.}},
            {{/scale_in_cooldown}}
            {{#scale_out_cooldown}}
            scaleOutCooldownSec: {{.}},
            {{/scale_out_cooldown}}
        });
        {{/on_request}}
        {{#on_schedule}}
        scaling.scaleOnSchedule('FargateScalingOnSchedule', {
            schedule: {{{schedule}}},
            {{#max_capacity}}
            maxCapacity: {{.}},
            {{/max_capacity}}
            {{#min_capacity}}
            minCapacity: {{.}},
            {{/min_capacity}}
            {{#start_time}}
            startTime: new Date({{.}}),
            {{/start_time}}
            {{#end_time}}
            endTime: new Date({{.}}),
            {{/end_time}}
        });
        {{/on_schedule}}
        {{#to_track_custom_metric}}
        {{#metric}}
        const custom_metric = new cloudwatch.Metric('CustomMetric', {
            metricName: {{name}},
            metricNamespace: {{namespace}},
            {{#color}}
            color: '{{.}}',
            {{/color}}
            dimensions: {
            {{#dimensions}}
              {{{.}}}
            {{/dimensions}}
            },
            {{#label}}
            label: '{{.}}',
            {{/label}}
            {{#period_sec}}
            periodSec: {{.}},
            {{/period_sec}}
            {{#statistic}}
            statistic: '{{.}}',
            {{/statistic}}
            {{#unit}}
            unit: cloudwatch.Unit.{{.}},
            {{/unit}}
        });
        {{/metric}}
        scaling.scaleToTrackCustomMetric('FargateScalingOnCustomMetric', {
            metric: custom_metric,
            {{#disable_scale_in}}
            disableScaleIn: true,
            {{/disable_scale_in}}
            {{#scale_in_cooldown}}
            scaleInCooldownSec: {{.}},
            {{/scale_in_cooldown}}
            {{#scale_out_cooldown}}
            scaleOutCooldownSec: {{.}},
            {{/scale_out_cooldown}}
        });
        {{/to_track_custom_metric}}

        {{/scaling}}
        this.service = lbFargate.service;
    }
}
